
Laboratorio4_Slave0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000088e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000088e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e22  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae8  00000000  00000000  000017d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f2  00000000  00000000  000022ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  000028ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d9  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f4  00000000  00000000  0000306d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003561  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_24>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_42>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a5 30       	cpi	r26, 0x05	; 5
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  d4:	0c 94 0b 04 	jmp	0x816	; 0x816 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <SettingADC>:
#include "ADC.h"

void SettingADC(uint8_t ReferenceADC, uint8_t AdjustADC, uint8_t PrescalerADC, uint8_t TriggerSourceADC) {
	ADMUX = (ADMUX & 0x3F) | (ReferenceADC);				// Voltage reference selection
  dc:	ec e7       	ldi	r30, 0x7C	; 124
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	9f 73       	andi	r25, 0x3F	; 63
  e4:	89 2b       	or	r24, r25
  e6:	80 83       	st	Z, r24
	ADMUX = (ADMUX & 0xDF) | (AdjustADC);					// Justification
  e8:	80 81       	ld	r24, Z
  ea:	8f 7d       	andi	r24, 0xDF	; 223
  ec:	68 2b       	or	r22, r24
  ee:	60 83       	st	Z, r22
	ADCSRA = (ADCSRA & 0xF8) | (PrescalerADC);				// Prescaler
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 7f       	andi	r24, 0xF8	; 248
  f8:	48 2b       	or	r20, r24
  fa:	40 83       	st	Z, r20
	ADCSRB = (ADCSRB & 0xF8) | (TriggerSourceADC);			// Auto trigger source
  fc:	ab e7       	ldi	r26, 0x7B	; 123
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	8c 91       	ld	r24, X
 102:	88 7f       	andi	r24, 0xF8	; 248
 104:	28 2b       	or	r18, r24
 106:	2c 93       	st	X, r18
	ADCSRA &= ~(1<<ADEN);									// Disable ADC
 108:	80 81       	ld	r24, Z
 10a:	8f 77       	andi	r24, 0x7F	; 127
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <AnalogRead>:
}

uint8_t AnalogRead(uint8_t ChannelADC) {
	DIDR0 |= (1<<ChannelADC);
 110:	ee e7       	ldi	r30, 0x7E	; 126
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	90 81       	ld	r25, Z
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	08 2e       	mov	r0, r24
 11c:	02 c0       	rjmp	.+4      	; 0x122 <AnalogRead+0x12>
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <AnalogRead+0xe>
 126:	92 2b       	or	r25, r18
 128:	90 83       	st	Z, r25
	ADMUX = (ADMUX & 0xF0) | (ChannelADC);					// Conversion process (1/4)
 12a:	ec e7       	ldi	r30, 0x7C	; 124
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	90 81       	ld	r25, Z
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	89 2b       	or	r24, r25
 134:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN | 1<<ADSC);							// Conversion process (2/4)
 136:	ea e7       	ldi	r30, 0x7A	; 122
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 6c       	ori	r24, 0xC0	; 192
 13e:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));								// Conversion process (3/4)
 140:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 144:	86 fd       	sbrc	r24, 6
 146:	fc cf       	rjmp	.-8      	; 0x140 <AnalogRead+0x30>
	// ADCSRA &= ~(1<<ADEN);									// Conversion process (4/4)
	DIDR0 &= ~(1<<ChannelADC);
 148:	ee e7       	ldi	r30, 0x7E	; 126
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	20 95       	com	r18
 150:	28 23       	and	r18, r24
 152:	20 83       	st	Z, r18
	return ADCH;
 154:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 158:	08 95       	ret

0000015a <InitTimer4>:
		}
    }
}

void InitTimer4() {
	TCCR4A = 0;						// Normal port operation of OC4A/OC4B
 15a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
	TCCR4B |= (1<<WGM42);			// Mode 4: CTC with OCR4A as TOP
 15e:	e1 ea       	ldi	r30, 0xA1	; 161
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 60       	ori	r24, 0x08	; 8
 166:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS42 | 1<<CS40);	// Prescaler /1024.
 168:	80 81       	ld	r24, Z
 16a:	85 60       	ori	r24, 0x05	; 5
 16c:	80 83       	st	Z, r24
	TIMSK4 |= (1<<OCIE4A);			// Enable interrupt
 16e:	e2 e7       	ldi	r30, 0x72	; 114
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	82 60       	ori	r24, 0x02	; 2
 176:	80 83       	st	Z, r24
	OCR4A = 15623;					// Frequency: 1 Hz (no output compare)
 178:	87 e0       	ldi	r24, 0x07	; 7
 17a:	9d e3       	ldi	r25, 0x3D	; 61
 17c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 180:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 184:	08 95       	ret

00000186 <INIT_TWI>:

void INIT_TWI(uint8_t twi_address) {
	/* (1) The device's own slave address has been received.
	*  (2) The TWEN bit enables TWI n operation and activates the TWI n interface.
	*  (3) the TWI n interrupt request will be activated for as long as the TWCRn.TWINT Flag is high. */
	TWAR0 = (twi_address << 1);
 186:	88 0f       	add	r24, r24
 188:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR0 = (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 18c:	85 e4       	ldi	r24, 0x45	; 69
 18e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 192:	08 95       	ret

00000194 <main>:

uint8_t gas_level = 0;

int main(void)
{
    cli();
 194:	f8 94       	cli
	InitTimer4();
 196:	0e 94 ad 00 	call	0x15a	; 0x15a <InitTimer4>
	initFastPWM1();
 19a:	0e 94 af 01 	call	0x35e	; 0x35e <initFastPWM1>
	INIT_TWI(0x42);
 19e:	82 e4       	ldi	r24, 0x42	; 66
 1a0:	0e 94 c3 00 	call	0x186	; 0x186 <INIT_TWI>
	SettingADC(AVcc, LeftJustified, ADC_Prescaler128, FreeRunning);
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	47 e0       	ldi	r20, 0x07	; 7
 1a8:	60 e2       	ldi	r22, 0x20	; 32
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	0e 94 6e 00 	call	0xdc	; 0xdc <SettingADC>
	sei();
 1b0:	78 94       	sei
	
    while (1) 
    {
		if (update_gas) {
 1b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <update_gas>
 1b6:	88 23       	and	r24, r24
 1b8:	39 f0       	breq	.+14     	; 0x1c8 <main+0x34>
			update_gas = 0;
 1ba:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <update_gas>
			gas_level = AnalogRead(ChannelADC7);
 1be:	87 e0       	ldi	r24, 0x07	; 7
 1c0:	0e 94 88 00 	call	0x110	; 0x110 <AnalogRead>
 1c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		if (process_data) {
 1c8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <process_data>
 1cc:	88 23       	and	r24, r24
 1ce:	89 f3       	breq	.-30     	; 0x1b2 <main+0x1e>
			process_data = 0;
 1d0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <process_data>
			switch (received_data) {
 1d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <received_data>
 1d8:	81 3b       	cpi	r24, 0xB1	; 177
 1da:	49 f0       	breq	.+18     	; 0x1ee <main+0x5a>
 1dc:	82 3b       	cpi	r24, 0xB2	; 178
 1de:	61 f0       	breq	.+24     	; 0x1f8 <main+0x64>
 1e0:	81 3a       	cpi	r24, 0xA1	; 161
 1e2:	79 f4       	brne	.+30     	; 0x202 <main+0x6e>
				case 0xA1:
					response_data = gas_level;
 1e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <response_data>
				break;
 1ec:	e2 cf       	rjmp	.-60     	; 0x1b2 <main+0x1e>
				case 0xB1:
					Servo2(0);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 cb 01 	call	0x396	; 0x396 <Servo2>
				break;
 1f6:	dd cf       	rjmp	.-70     	; 0x1b2 <main+0x1e>
				case 0xB2:
					Servo2(180);
 1f8:	84 eb       	ldi	r24, 0xB4	; 180
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 cb 01 	call	0x396	; 0x396 <Servo2>
				break;
 200:	d8 cf       	rjmp	.-80     	; 0x1b2 <main+0x1e>
				default:
					response_data = '!';
 202:	81 e2       	ldi	r24, 0x21	; 33
 204:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <response_data>
				break;
 208:	d4 cf       	rjmp	.-88     	; 0x1b2 <main+0x1e>

0000020a <__vector_24>:
	*  (3) the TWI n interrupt request will be activated for as long as the TWCRn.TWINT Flag is high. */
	TWAR0 = (twi_address << 1);
	TWCR0 = (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
}

ISR(TWI0_vect) {
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
	switch (TWSR0 & 0xF8) {
 216:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 21a:	88 7f       	andi	r24, 0xF8	; 248
 21c:	80 38       	cpi	r24, 0x80	; 128
 21e:	69 f0       	breq	.+26     	; 0x23a <__vector_24+0x30>
 220:	18 f4       	brcc	.+6      	; 0x228 <__vector_24+0x1e>
 222:	80 36       	cpi	r24, 0x60	; 96
 224:	31 f0       	breq	.+12     	; 0x232 <__vector_24+0x28>
 226:	24 c0       	rjmp	.+72     	; 0x270 <__vector_24+0x66>
 228:	88 3a       	cpi	r24, 0xA8	; 168
 22a:	91 f0       	breq	.+36     	; 0x250 <__vector_24+0x46>
 22c:	88 3b       	cpi	r24, 0xB8	; 184
 22e:	c1 f0       	breq	.+48     	; 0x260 <__vector_24+0x56>
 230:	1f c0       	rjmp	.+62     	; 0x270 <__vector_24+0x66>
		case STATUS_SR_SLA_ACK:
			TWCR0 = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 232:	85 ec       	ldi	r24, 0xC5	; 197
 234:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 238:	1e c0       	rjmp	.+60     	; 0x276 <__vector_24+0x6c>
		
		case STATUS_SR_DATA_ACK:
			received_data = TWDR0;
 23a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 23e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <received_data>
			process_data = 1;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <process_data>
			TWCR0 = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 248:	85 ec       	ldi	r24, 0xC5	; 197
 24a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 24e:	13 c0       	rjmp	.+38     	; 0x276 <__vector_24+0x6c>
		
		case STATUS_ST_SLA_ACK:
			TWDR0 = response_data;
 250:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <response_data>
 254:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR0 = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 258:	85 ec       	ldi	r24, 0xC5	; 197
 25a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 25e:	0b c0       	rjmp	.+22     	; 0x276 <__vector_24+0x6c>
		
		case STATUS_ST_DATA_ACK:
			TWDR0 = response_data;
 260:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <response_data>
 264:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR0 = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 268:	85 ec       	ldi	r24, 0xC5	; 197
 26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 26e:	03 c0       	rjmp	.+6      	; 0x276 <__vector_24+0x6c>
		
		default:
			TWCR0 = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
 270:	85 ec       	ldi	r24, 0xC5	; 197
 272:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
	}
}
 276:	8f 91       	pop	r24
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__vector_42>:

ISR(TIMER4_COMPA_vect) {
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	8f 93       	push	r24
	update_gas = 1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <update_gas>
 294:	8f 91       	pop	r24
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <map>:
	//uint16_t duty_cycle = map(Servo_ang, 0, 180, 1000, 4800);
	//OCR1B = ((adc_value * 200) / 1023) + 1000;
	//OCR1B = map(Servo_ang, 0, 180, 0, 7000);
	OCR1B = map(Servo_ang, 0, 180, 1080, 4000);

}
 2a0:	4f 92       	push	r4
 2a2:	5f 92       	push	r5
 2a4:	6f 92       	push	r6
 2a6:	7f 92       	push	r7
 2a8:	af 92       	push	r10
 2aa:	bf 92       	push	r11
 2ac:	cf 92       	push	r12
 2ae:	df 92       	push	r13
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	28 97       	sbiw	r28, 0x08	; 8
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	de bf       	out	0x3e, r29	; 62
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	cd bf       	out	0x3d, r28	; 61
 2cc:	29 01       	movw	r4, r18
 2ce:	3a 01       	movw	r6, r20
 2d0:	ed 82       	std	Y+5, r14	; 0x05
 2d2:	fe 82       	std	Y+6, r15	; 0x06
 2d4:	0f 83       	std	Y+7, r16	; 0x07
 2d6:	18 87       	std	Y+8, r17	; 0x08
 2d8:	0e 94 02 02 	call	0x404	; 0x404 <__subsf3>
 2dc:	69 83       	std	Y+1, r22	; 0x01
 2de:	7a 83       	std	Y+2, r23	; 0x02
 2e0:	8b 83       	std	Y+3, r24	; 0x03
 2e2:	9c 83       	std	Y+4, r25	; 0x04
 2e4:	a6 01       	movw	r20, r12
 2e6:	95 01       	movw	r18, r10
 2e8:	69 8d       	ldd	r22, Y+25	; 0x19
 2ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
 2ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2f0:	0e 94 02 02 	call	0x404	; 0x404 <__subsf3>
 2f4:	9b 01       	movw	r18, r22
 2f6:	ac 01       	movw	r20, r24
 2f8:	69 81       	ldd	r22, Y+1	; 0x01
 2fa:	7a 81       	ldd	r23, Y+2	; 0x02
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	9c 81       	ldd	r25, Y+4	; 0x04
 300:	0e 94 9e 03 	call	0x73c	; 0x73c <__mulsf3>
 304:	69 83       	std	Y+1, r22	; 0x01
 306:	7a 83       	std	Y+2, r23	; 0x02
 308:	8b 83       	std	Y+3, r24	; 0x03
 30a:	9c 83       	std	Y+4, r25	; 0x04
 30c:	a3 01       	movw	r20, r6
 30e:	92 01       	movw	r18, r4
 310:	c8 01       	movw	r24, r16
 312:	b7 01       	movw	r22, r14
 314:	0e 94 02 02 	call	0x404	; 0x404 <__subsf3>
 318:	9b 01       	movw	r18, r22
 31a:	ac 01       	movw	r20, r24
 31c:	69 81       	ldd	r22, Y+1	; 0x01
 31e:	7a 81       	ldd	r23, Y+2	; 0x02
 320:	8b 81       	ldd	r24, Y+3	; 0x03
 322:	9c 81       	ldd	r25, Y+4	; 0x04
 324:	0e 94 6f 02 	call	0x4de	; 0x4de <__divsf3>
 328:	9b 01       	movw	r18, r22
 32a:	ac 01       	movw	r20, r24
 32c:	c6 01       	movw	r24, r12
 32e:	b5 01       	movw	r22, r10
 330:	0e 94 03 02 	call	0x406	; 0x406 <__addsf3>
 334:	28 96       	adiw	r28, 0x08	; 8
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	ff 90       	pop	r15
 34a:	ef 90       	pop	r14
 34c:	df 90       	pop	r13
 34e:	cf 90       	pop	r12
 350:	bf 90       	pop	r11
 352:	af 90       	pop	r10
 354:	7f 90       	pop	r7
 356:	6f 90       	pop	r6
 358:	5f 90       	pop	r5
 35a:	4f 90       	pop	r4
 35c:	08 95       	ret

0000035e <initFastPWM1>:
 35e:	84 b1       	in	r24, 0x04	; 4
 360:	86 60       	ori	r24, 0x06	; 6
 362:	84 b9       	out	0x04, r24	; 4
 364:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 368:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 36c:	8f e3       	ldi	r24, 0x3F	; 63
 36e:	9c e9       	ldi	r25, 0x9C	; 156
 370:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 374:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 378:	e0 e8       	ldi	r30, 0x80	; 128
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 ea       	ldi	r24, 0xA0	; 160
 37e:	80 83       	st	Z, r24
 380:	80 81       	ld	r24, Z
 382:	82 60       	ori	r24, 0x02	; 2
 384:	80 83       	st	Z, r24
 386:	e1 e8       	ldi	r30, 0x81	; 129
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	88 e1       	ldi	r24, 0x18	; 24
 38c:	80 83       	st	Z, r24
 38e:	80 81       	ld	r24, Z
 390:	82 60       	ori	r24, 0x02	; 2
 392:	80 83       	st	Z, r24
 394:	08 95       	ret

00000396 <Servo2>:

void Servo2(uint16_t Servo_ang){
 396:	af 92       	push	r10
 398:	bf 92       	push	r11
 39a:	cf 92       	push	r12
 39c:	df 92       	push	r13
 39e:	ef 92       	push	r14
 3a0:	ff 92       	push	r15
 3a2:	0f 93       	push	r16
 3a4:	1f 93       	push	r17
	OCR1A = map(Servo_ang, 0, 180, 1080, 4000);
 3a6:	bc 01       	movw	r22, r24
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 10 03 	call	0x620	; 0x620 <__floatunsisf>
 3b0:	25 e4       	ldi	r18, 0x45	; 69
 3b2:	2f 93       	push	r18
 3b4:	2a e7       	ldi	r18, 0x7A	; 122
 3b6:	2f 93       	push	r18
 3b8:	1f 92       	push	r1
 3ba:	1f 92       	push	r1
 3bc:	0f 2e       	mov	r0, r31
 3be:	a1 2c       	mov	r10, r1
 3c0:	b1 2c       	mov	r11, r1
 3c2:	f7 e8       	ldi	r31, 0x87	; 135
 3c4:	cf 2e       	mov	r12, r31
 3c6:	f4 e4       	ldi	r31, 0x44	; 68
 3c8:	df 2e       	mov	r13, r31
 3ca:	f0 2d       	mov	r31, r0
 3cc:	e1 2c       	mov	r14, r1
 3ce:	f1 2c       	mov	r15, r1
 3d0:	04 e3       	ldi	r16, 0x34	; 52
 3d2:	13 e4       	ldi	r17, 0x43	; 67
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	a9 01       	movw	r20, r18
 3da:	0e 94 50 01 	call	0x2a0	; 0x2a0 <map>
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fixunssfsi>
 3ea:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3ee:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	ff 90       	pop	r15
 3f8:	ef 90       	pop	r14
 3fa:	df 90       	pop	r13
 3fc:	cf 90       	pop	r12
 3fe:	bf 90       	pop	r11
 400:	af 90       	pop	r10
 402:	08 95       	ret

00000404 <__subsf3>:
 404:	50 58       	subi	r21, 0x80	; 128

00000406 <__addsf3>:
 406:	bb 27       	eor	r27, r27
 408:	aa 27       	eor	r26, r26
 40a:	0e 94 1a 02 	call	0x434	; 0x434 <__addsf3x>
 40e:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_round>
 412:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscA>
 416:	38 f0       	brcs	.+14     	; 0x426 <__addsf3+0x20>
 418:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_pscB>
 41c:	20 f0       	brcs	.+8      	; 0x426 <__addsf3+0x20>
 41e:	39 f4       	brne	.+14     	; 0x42e <__addsf3+0x28>
 420:	9f 3f       	cpi	r25, 0xFF	; 255
 422:	19 f4       	brne	.+6      	; 0x42a <__addsf3+0x24>
 424:	26 f4       	brtc	.+8      	; 0x42e <__addsf3+0x28>
 426:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_nan>
 42a:	0e f4       	brtc	.+2      	; 0x42e <__addsf3+0x28>
 42c:	e0 95       	com	r30
 42e:	e7 fb       	bst	r30, 7
 430:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>

00000434 <__addsf3x>:
 434:	e9 2f       	mov	r30, r25
 436:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_split3>
 43a:	58 f3       	brcs	.-42     	; 0x412 <__addsf3+0xc>
 43c:	ba 17       	cp	r27, r26
 43e:	62 07       	cpc	r22, r18
 440:	73 07       	cpc	r23, r19
 442:	84 07       	cpc	r24, r20
 444:	95 07       	cpc	r25, r21
 446:	20 f0       	brcs	.+8      	; 0x450 <__addsf3x+0x1c>
 448:	79 f4       	brne	.+30     	; 0x468 <__addsf3x+0x34>
 44a:	a6 f5       	brtc	.+104    	; 0x4b4 <__addsf3x+0x80>
 44c:	0c 94 97 03 	jmp	0x72e	; 0x72e <__fp_zero>
 450:	0e f4       	brtc	.+2      	; 0x454 <__addsf3x+0x20>
 452:	e0 95       	com	r30
 454:	0b 2e       	mov	r0, r27
 456:	ba 2f       	mov	r27, r26
 458:	a0 2d       	mov	r26, r0
 45a:	0b 01       	movw	r0, r22
 45c:	b9 01       	movw	r22, r18
 45e:	90 01       	movw	r18, r0
 460:	0c 01       	movw	r0, r24
 462:	ca 01       	movw	r24, r20
 464:	a0 01       	movw	r20, r0
 466:	11 24       	eor	r1, r1
 468:	ff 27       	eor	r31, r31
 46a:	59 1b       	sub	r21, r25
 46c:	99 f0       	breq	.+38     	; 0x494 <__addsf3x+0x60>
 46e:	59 3f       	cpi	r21, 0xF9	; 249
 470:	50 f4       	brcc	.+20     	; 0x486 <__addsf3x+0x52>
 472:	50 3e       	cpi	r21, 0xE0	; 224
 474:	68 f1       	brcs	.+90     	; 0x4d0 <__addsf3x+0x9c>
 476:	1a 16       	cp	r1, r26
 478:	f0 40       	sbci	r31, 0x00	; 0
 47a:	a2 2f       	mov	r26, r18
 47c:	23 2f       	mov	r18, r19
 47e:	34 2f       	mov	r19, r20
 480:	44 27       	eor	r20, r20
 482:	58 5f       	subi	r21, 0xF8	; 248
 484:	f3 cf       	rjmp	.-26     	; 0x46c <__addsf3x+0x38>
 486:	46 95       	lsr	r20
 488:	37 95       	ror	r19
 48a:	27 95       	ror	r18
 48c:	a7 95       	ror	r26
 48e:	f0 40       	sbci	r31, 0x00	; 0
 490:	53 95       	inc	r21
 492:	c9 f7       	brne	.-14     	; 0x486 <__addsf3x+0x52>
 494:	7e f4       	brtc	.+30     	; 0x4b4 <__addsf3x+0x80>
 496:	1f 16       	cp	r1, r31
 498:	ba 0b       	sbc	r27, r26
 49a:	62 0b       	sbc	r22, r18
 49c:	73 0b       	sbc	r23, r19
 49e:	84 0b       	sbc	r24, r20
 4a0:	ba f0       	brmi	.+46     	; 0x4d0 <__addsf3x+0x9c>
 4a2:	91 50       	subi	r25, 0x01	; 1
 4a4:	a1 f0       	breq	.+40     	; 0x4ce <__addsf3x+0x9a>
 4a6:	ff 0f       	add	r31, r31
 4a8:	bb 1f       	adc	r27, r27
 4aa:	66 1f       	adc	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	88 1f       	adc	r24, r24
 4b0:	c2 f7       	brpl	.-16     	; 0x4a2 <__addsf3x+0x6e>
 4b2:	0e c0       	rjmp	.+28     	; 0x4d0 <__addsf3x+0x9c>
 4b4:	ba 0f       	add	r27, r26
 4b6:	62 1f       	adc	r22, r18
 4b8:	73 1f       	adc	r23, r19
 4ba:	84 1f       	adc	r24, r20
 4bc:	48 f4       	brcc	.+18     	; 0x4d0 <__addsf3x+0x9c>
 4be:	87 95       	ror	r24
 4c0:	77 95       	ror	r23
 4c2:	67 95       	ror	r22
 4c4:	b7 95       	ror	r27
 4c6:	f7 95       	ror	r31
 4c8:	9e 3f       	cpi	r25, 0xFE	; 254
 4ca:	08 f0       	brcs	.+2      	; 0x4ce <__addsf3x+0x9a>
 4cc:	b0 cf       	rjmp	.-160    	; 0x42e <__addsf3+0x28>
 4ce:	93 95       	inc	r25
 4d0:	88 0f       	add	r24, r24
 4d2:	08 f0       	brcs	.+2      	; 0x4d6 <__addsf3x+0xa2>
 4d4:	99 27       	eor	r25, r25
 4d6:	ee 0f       	add	r30, r30
 4d8:	97 95       	ror	r25
 4da:	87 95       	ror	r24
 4dc:	08 95       	ret

000004de <__divsf3>:
 4de:	0e 94 83 02 	call	0x506	; 0x506 <__divsf3x>
 4e2:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_round>
 4e6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_pscB>
 4ea:	58 f0       	brcs	.+22     	; 0x502 <__divsf3+0x24>
 4ec:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscA>
 4f0:	40 f0       	brcs	.+16     	; 0x502 <__divsf3+0x24>
 4f2:	29 f4       	brne	.+10     	; 0x4fe <__divsf3+0x20>
 4f4:	5f 3f       	cpi	r21, 0xFF	; 255
 4f6:	29 f0       	breq	.+10     	; 0x502 <__divsf3+0x24>
 4f8:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 4fc:	51 11       	cpse	r21, r1
 4fe:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 502:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_nan>

00000506 <__divsf3x>:
 506:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_split3>
 50a:	68 f3       	brcs	.-38     	; 0x4e6 <__divsf3+0x8>

0000050c <__divsf3_pse>:
 50c:	99 23       	and	r25, r25
 50e:	b1 f3       	breq	.-20     	; 0x4fc <__divsf3+0x1e>
 510:	55 23       	and	r21, r21
 512:	91 f3       	breq	.-28     	; 0x4f8 <__divsf3+0x1a>
 514:	95 1b       	sub	r25, r21
 516:	55 0b       	sbc	r21, r21
 518:	bb 27       	eor	r27, r27
 51a:	aa 27       	eor	r26, r26
 51c:	62 17       	cp	r22, r18
 51e:	73 07       	cpc	r23, r19
 520:	84 07       	cpc	r24, r20
 522:	38 f0       	brcs	.+14     	; 0x532 <__divsf3_pse+0x26>
 524:	9f 5f       	subi	r25, 0xFF	; 255
 526:	5f 4f       	sbci	r21, 0xFF	; 255
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	44 1f       	adc	r20, r20
 52e:	aa 1f       	adc	r26, r26
 530:	a9 f3       	breq	.-22     	; 0x51c <__divsf3_pse+0x10>
 532:	35 d0       	rcall	.+106    	; 0x59e <__divsf3_pse+0x92>
 534:	0e 2e       	mov	r0, r30
 536:	3a f0       	brmi	.+14     	; 0x546 <__divsf3_pse+0x3a>
 538:	e0 e8       	ldi	r30, 0x80	; 128
 53a:	32 d0       	rcall	.+100    	; 0x5a0 <__divsf3_pse+0x94>
 53c:	91 50       	subi	r25, 0x01	; 1
 53e:	50 40       	sbci	r21, 0x00	; 0
 540:	e6 95       	lsr	r30
 542:	00 1c       	adc	r0, r0
 544:	ca f7       	brpl	.-14     	; 0x538 <__divsf3_pse+0x2c>
 546:	2b d0       	rcall	.+86     	; 0x59e <__divsf3_pse+0x92>
 548:	fe 2f       	mov	r31, r30
 54a:	29 d0       	rcall	.+82     	; 0x59e <__divsf3_pse+0x92>
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	bb 1f       	adc	r27, r27
 554:	26 17       	cp	r18, r22
 556:	37 07       	cpc	r19, r23
 558:	48 07       	cpc	r20, r24
 55a:	ab 07       	cpc	r26, r27
 55c:	b0 e8       	ldi	r27, 0x80	; 128
 55e:	09 f0       	breq	.+2      	; 0x562 <__divsf3_pse+0x56>
 560:	bb 0b       	sbc	r27, r27
 562:	80 2d       	mov	r24, r0
 564:	bf 01       	movw	r22, r30
 566:	ff 27       	eor	r31, r31
 568:	93 58       	subi	r25, 0x83	; 131
 56a:	5f 4f       	sbci	r21, 0xFF	; 255
 56c:	3a f0       	brmi	.+14     	; 0x57c <__divsf3_pse+0x70>
 56e:	9e 3f       	cpi	r25, 0xFE	; 254
 570:	51 05       	cpc	r21, r1
 572:	78 f0       	brcs	.+30     	; 0x592 <__divsf3_pse+0x86>
 574:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 578:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 57c:	5f 3f       	cpi	r21, 0xFF	; 255
 57e:	e4 f3       	brlt	.-8      	; 0x578 <__divsf3_pse+0x6c>
 580:	98 3e       	cpi	r25, 0xE8	; 232
 582:	d4 f3       	brlt	.-12     	; 0x578 <__divsf3_pse+0x6c>
 584:	86 95       	lsr	r24
 586:	77 95       	ror	r23
 588:	67 95       	ror	r22
 58a:	b7 95       	ror	r27
 58c:	f7 95       	ror	r31
 58e:	9f 5f       	subi	r25, 0xFF	; 255
 590:	c9 f7       	brne	.-14     	; 0x584 <__divsf3_pse+0x78>
 592:	88 0f       	add	r24, r24
 594:	91 1d       	adc	r25, r1
 596:	96 95       	lsr	r25
 598:	87 95       	ror	r24
 59a:	97 f9       	bld	r25, 7
 59c:	08 95       	ret
 59e:	e1 e0       	ldi	r30, 0x01	; 1
 5a0:	66 0f       	add	r22, r22
 5a2:	77 1f       	adc	r23, r23
 5a4:	88 1f       	adc	r24, r24
 5a6:	bb 1f       	adc	r27, r27
 5a8:	62 17       	cp	r22, r18
 5aa:	73 07       	cpc	r23, r19
 5ac:	84 07       	cpc	r24, r20
 5ae:	ba 07       	cpc	r27, r26
 5b0:	20 f0       	brcs	.+8      	; 0x5ba <__divsf3_pse+0xae>
 5b2:	62 1b       	sub	r22, r18
 5b4:	73 0b       	sbc	r23, r19
 5b6:	84 0b       	sbc	r24, r20
 5b8:	ba 0b       	sbc	r27, r26
 5ba:	ee 1f       	adc	r30, r30
 5bc:	88 f7       	brcc	.-30     	; 0x5a0 <__divsf3_pse+0x94>
 5be:	e0 95       	com	r30
 5c0:	08 95       	ret

000005c2 <__fixunssfsi>:
 5c2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_splitA>
 5c6:	88 f0       	brcs	.+34     	; 0x5ea <__fixunssfsi+0x28>
 5c8:	9f 57       	subi	r25, 0x7F	; 127
 5ca:	98 f0       	brcs	.+38     	; 0x5f2 <__fixunssfsi+0x30>
 5cc:	b9 2f       	mov	r27, r25
 5ce:	99 27       	eor	r25, r25
 5d0:	b7 51       	subi	r27, 0x17	; 23
 5d2:	b0 f0       	brcs	.+44     	; 0x600 <__fixunssfsi+0x3e>
 5d4:	e1 f0       	breq	.+56     	; 0x60e <__fixunssfsi+0x4c>
 5d6:	66 0f       	add	r22, r22
 5d8:	77 1f       	adc	r23, r23
 5da:	88 1f       	adc	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	1a f0       	brmi	.+6      	; 0x5e6 <__fixunssfsi+0x24>
 5e0:	ba 95       	dec	r27
 5e2:	c9 f7       	brne	.-14     	; 0x5d6 <__fixunssfsi+0x14>
 5e4:	14 c0       	rjmp	.+40     	; 0x60e <__fixunssfsi+0x4c>
 5e6:	b1 30       	cpi	r27, 0x01	; 1
 5e8:	91 f0       	breq	.+36     	; 0x60e <__fixunssfsi+0x4c>
 5ea:	0e 94 97 03 	call	0x72e	; 0x72e <__fp_zero>
 5ee:	b1 e0       	ldi	r27, 0x01	; 1
 5f0:	08 95       	ret
 5f2:	0c 94 97 03 	jmp	0x72e	; 0x72e <__fp_zero>
 5f6:	67 2f       	mov	r22, r23
 5f8:	78 2f       	mov	r23, r24
 5fa:	88 27       	eor	r24, r24
 5fc:	b8 5f       	subi	r27, 0xF8	; 248
 5fe:	39 f0       	breq	.+14     	; 0x60e <__fixunssfsi+0x4c>
 600:	b9 3f       	cpi	r27, 0xF9	; 249
 602:	cc f3       	brlt	.-14     	; 0x5f6 <__fixunssfsi+0x34>
 604:	86 95       	lsr	r24
 606:	77 95       	ror	r23
 608:	67 95       	ror	r22
 60a:	b3 95       	inc	r27
 60c:	d9 f7       	brne	.-10     	; 0x604 <__fixunssfsi+0x42>
 60e:	3e f4       	brtc	.+14     	; 0x61e <__fixunssfsi+0x5c>
 610:	90 95       	com	r25
 612:	80 95       	com	r24
 614:	70 95       	com	r23
 616:	61 95       	neg	r22
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8f 4f       	sbci	r24, 0xFF	; 255
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	08 95       	ret

00000620 <__floatunsisf>:
 620:	e8 94       	clt
 622:	09 c0       	rjmp	.+18     	; 0x636 <__floatsisf+0x12>

00000624 <__floatsisf>:
 624:	97 fb       	bst	r25, 7
 626:	3e f4       	brtc	.+14     	; 0x636 <__floatsisf+0x12>
 628:	90 95       	com	r25
 62a:	80 95       	com	r24
 62c:	70 95       	com	r23
 62e:	61 95       	neg	r22
 630:	7f 4f       	sbci	r23, 0xFF	; 255
 632:	8f 4f       	sbci	r24, 0xFF	; 255
 634:	9f 4f       	sbci	r25, 0xFF	; 255
 636:	99 23       	and	r25, r25
 638:	a9 f0       	breq	.+42     	; 0x664 <__floatsisf+0x40>
 63a:	f9 2f       	mov	r31, r25
 63c:	96 e9       	ldi	r25, 0x96	; 150
 63e:	bb 27       	eor	r27, r27
 640:	93 95       	inc	r25
 642:	f6 95       	lsr	r31
 644:	87 95       	ror	r24
 646:	77 95       	ror	r23
 648:	67 95       	ror	r22
 64a:	b7 95       	ror	r27
 64c:	f1 11       	cpse	r31, r1
 64e:	f8 cf       	rjmp	.-16     	; 0x640 <__floatsisf+0x1c>
 650:	fa f4       	brpl	.+62     	; 0x690 <__floatsisf+0x6c>
 652:	bb 0f       	add	r27, r27
 654:	11 f4       	brne	.+4      	; 0x65a <__floatsisf+0x36>
 656:	60 ff       	sbrs	r22, 0
 658:	1b c0       	rjmp	.+54     	; 0x690 <__floatsisf+0x6c>
 65a:	6f 5f       	subi	r22, 0xFF	; 255
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	8f 4f       	sbci	r24, 0xFF	; 255
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	16 c0       	rjmp	.+44     	; 0x690 <__floatsisf+0x6c>
 664:	88 23       	and	r24, r24
 666:	11 f0       	breq	.+4      	; 0x66c <__floatsisf+0x48>
 668:	96 e9       	ldi	r25, 0x96	; 150
 66a:	11 c0       	rjmp	.+34     	; 0x68e <__floatsisf+0x6a>
 66c:	77 23       	and	r23, r23
 66e:	21 f0       	breq	.+8      	; 0x678 <__floatsisf+0x54>
 670:	9e e8       	ldi	r25, 0x8E	; 142
 672:	87 2f       	mov	r24, r23
 674:	76 2f       	mov	r23, r22
 676:	05 c0       	rjmp	.+10     	; 0x682 <__floatsisf+0x5e>
 678:	66 23       	and	r22, r22
 67a:	71 f0       	breq	.+28     	; 0x698 <__floatsisf+0x74>
 67c:	96 e8       	ldi	r25, 0x86	; 134
 67e:	86 2f       	mov	r24, r22
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	2a f0       	brmi	.+10     	; 0x690 <__floatsisf+0x6c>
 686:	9a 95       	dec	r25
 688:	66 0f       	add	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	88 1f       	adc	r24, r24
 68e:	da f7       	brpl	.-10     	; 0x686 <__floatsisf+0x62>
 690:	88 0f       	add	r24, r24
 692:	96 95       	lsr	r25
 694:	87 95       	ror	r24
 696:	97 f9       	bld	r25, 7
 698:	08 95       	ret

0000069a <__fp_inf>:
 69a:	97 f9       	bld	r25, 7
 69c:	9f 67       	ori	r25, 0x7F	; 127
 69e:	80 e8       	ldi	r24, 0x80	; 128
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	08 95       	ret

000006a6 <__fp_nan>:
 6a6:	9f ef       	ldi	r25, 0xFF	; 255
 6a8:	80 ec       	ldi	r24, 0xC0	; 192
 6aa:	08 95       	ret

000006ac <__fp_pscA>:
 6ac:	00 24       	eor	r0, r0
 6ae:	0a 94       	dec	r0
 6b0:	16 16       	cp	r1, r22
 6b2:	17 06       	cpc	r1, r23
 6b4:	18 06       	cpc	r1, r24
 6b6:	09 06       	cpc	r0, r25
 6b8:	08 95       	ret

000006ba <__fp_pscB>:
 6ba:	00 24       	eor	r0, r0
 6bc:	0a 94       	dec	r0
 6be:	12 16       	cp	r1, r18
 6c0:	13 06       	cpc	r1, r19
 6c2:	14 06       	cpc	r1, r20
 6c4:	05 06       	cpc	r0, r21
 6c6:	08 95       	ret

000006c8 <__fp_round>:
 6c8:	09 2e       	mov	r0, r25
 6ca:	03 94       	inc	r0
 6cc:	00 0c       	add	r0, r0
 6ce:	11 f4       	brne	.+4      	; 0x6d4 <__fp_round+0xc>
 6d0:	88 23       	and	r24, r24
 6d2:	52 f0       	brmi	.+20     	; 0x6e8 <__fp_round+0x20>
 6d4:	bb 0f       	add	r27, r27
 6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__fp_round+0x20>
 6d8:	bf 2b       	or	r27, r31
 6da:	11 f4       	brne	.+4      	; 0x6e0 <__fp_round+0x18>
 6dc:	60 ff       	sbrs	r22, 0
 6de:	04 c0       	rjmp	.+8      	; 0x6e8 <__fp_round+0x20>
 6e0:	6f 5f       	subi	r22, 0xFF	; 255
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	8f 4f       	sbci	r24, 0xFF	; 255
 6e6:	9f 4f       	sbci	r25, 0xFF	; 255
 6e8:	08 95       	ret

000006ea <__fp_split3>:
 6ea:	57 fd       	sbrc	r21, 7
 6ec:	90 58       	subi	r25, 0x80	; 128
 6ee:	44 0f       	add	r20, r20
 6f0:	55 1f       	adc	r21, r21
 6f2:	59 f0       	breq	.+22     	; 0x70a <__fp_splitA+0x10>
 6f4:	5f 3f       	cpi	r21, 0xFF	; 255
 6f6:	71 f0       	breq	.+28     	; 0x714 <__fp_splitA+0x1a>
 6f8:	47 95       	ror	r20

000006fa <__fp_splitA>:
 6fa:	88 0f       	add	r24, r24
 6fc:	97 fb       	bst	r25, 7
 6fe:	99 1f       	adc	r25, r25
 700:	61 f0       	breq	.+24     	; 0x71a <__fp_splitA+0x20>
 702:	9f 3f       	cpi	r25, 0xFF	; 255
 704:	79 f0       	breq	.+30     	; 0x724 <__fp_splitA+0x2a>
 706:	87 95       	ror	r24
 708:	08 95       	ret
 70a:	12 16       	cp	r1, r18
 70c:	13 06       	cpc	r1, r19
 70e:	14 06       	cpc	r1, r20
 710:	55 1f       	adc	r21, r21
 712:	f2 cf       	rjmp	.-28     	; 0x6f8 <__fp_split3+0xe>
 714:	46 95       	lsr	r20
 716:	f1 df       	rcall	.-30     	; 0x6fa <__fp_splitA>
 718:	08 c0       	rjmp	.+16     	; 0x72a <__fp_splitA+0x30>
 71a:	16 16       	cp	r1, r22
 71c:	17 06       	cpc	r1, r23
 71e:	18 06       	cpc	r1, r24
 720:	99 1f       	adc	r25, r25
 722:	f1 cf       	rjmp	.-30     	; 0x706 <__fp_splitA+0xc>
 724:	86 95       	lsr	r24
 726:	71 05       	cpc	r23, r1
 728:	61 05       	cpc	r22, r1
 72a:	08 94       	sec
 72c:	08 95       	ret

0000072e <__fp_zero>:
 72e:	e8 94       	clt

00000730 <__fp_szero>:
 730:	bb 27       	eor	r27, r27
 732:	66 27       	eor	r22, r22
 734:	77 27       	eor	r23, r23
 736:	cb 01       	movw	r24, r22
 738:	97 f9       	bld	r25, 7
 73a:	08 95       	ret

0000073c <__mulsf3>:
 73c:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsf3x>
 740:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_round>
 744:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscA>
 748:	38 f0       	brcs	.+14     	; 0x758 <__mulsf3+0x1c>
 74a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_pscB>
 74e:	20 f0       	brcs	.+8      	; 0x758 <__mulsf3+0x1c>
 750:	95 23       	and	r25, r21
 752:	11 f0       	breq	.+4      	; 0x758 <__mulsf3+0x1c>
 754:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 758:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_nan>
 75c:	11 24       	eor	r1, r1
 75e:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>

00000762 <__mulsf3x>:
 762:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_split3>
 766:	70 f3       	brcs	.-36     	; 0x744 <__mulsf3+0x8>

00000768 <__mulsf3_pse>:
 768:	95 9f       	mul	r25, r21
 76a:	c1 f3       	breq	.-16     	; 0x75c <__mulsf3+0x20>
 76c:	95 0f       	add	r25, r21
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	55 1f       	adc	r21, r21
 772:	62 9f       	mul	r22, r18
 774:	f0 01       	movw	r30, r0
 776:	72 9f       	mul	r23, r18
 778:	bb 27       	eor	r27, r27
 77a:	f0 0d       	add	r31, r0
 77c:	b1 1d       	adc	r27, r1
 77e:	63 9f       	mul	r22, r19
 780:	aa 27       	eor	r26, r26
 782:	f0 0d       	add	r31, r0
 784:	b1 1d       	adc	r27, r1
 786:	aa 1f       	adc	r26, r26
 788:	64 9f       	mul	r22, r20
 78a:	66 27       	eor	r22, r22
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	66 1f       	adc	r22, r22
 792:	82 9f       	mul	r24, r18
 794:	22 27       	eor	r18, r18
 796:	b0 0d       	add	r27, r0
 798:	a1 1d       	adc	r26, r1
 79a:	62 1f       	adc	r22, r18
 79c:	73 9f       	mul	r23, r19
 79e:	b0 0d       	add	r27, r0
 7a0:	a1 1d       	adc	r26, r1
 7a2:	62 1f       	adc	r22, r18
 7a4:	83 9f       	mul	r24, r19
 7a6:	a0 0d       	add	r26, r0
 7a8:	61 1d       	adc	r22, r1
 7aa:	22 1f       	adc	r18, r18
 7ac:	74 9f       	mul	r23, r20
 7ae:	33 27       	eor	r19, r19
 7b0:	a0 0d       	add	r26, r0
 7b2:	61 1d       	adc	r22, r1
 7b4:	23 1f       	adc	r18, r19
 7b6:	84 9f       	mul	r24, r20
 7b8:	60 0d       	add	r22, r0
 7ba:	21 1d       	adc	r18, r1
 7bc:	82 2f       	mov	r24, r18
 7be:	76 2f       	mov	r23, r22
 7c0:	6a 2f       	mov	r22, r26
 7c2:	11 24       	eor	r1, r1
 7c4:	9f 57       	subi	r25, 0x7F	; 127
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	9a f0       	brmi	.+38     	; 0x7f0 <__mulsf3_pse+0x88>
 7ca:	f1 f0       	breq	.+60     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7cc:	88 23       	and	r24, r24
 7ce:	4a f0       	brmi	.+18     	; 0x7e2 <__mulsf3_pse+0x7a>
 7d0:	ee 0f       	add	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	bb 1f       	adc	r27, r27
 7d6:	66 1f       	adc	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	50 40       	sbci	r21, 0x00	; 0
 7e0:	a9 f7       	brne	.-22     	; 0x7cc <__mulsf3_pse+0x64>
 7e2:	9e 3f       	cpi	r25, 0xFE	; 254
 7e4:	51 05       	cpc	r21, r1
 7e6:	80 f0       	brcs	.+32     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7e8:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 7ec:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 7f0:	5f 3f       	cpi	r21, 0xFF	; 255
 7f2:	e4 f3       	brlt	.-8      	; 0x7ec <__mulsf3_pse+0x84>
 7f4:	98 3e       	cpi	r25, 0xE8	; 232
 7f6:	d4 f3       	brlt	.-12     	; 0x7ec <__mulsf3_pse+0x84>
 7f8:	86 95       	lsr	r24
 7fa:	77 95       	ror	r23
 7fc:	67 95       	ror	r22
 7fe:	b7 95       	ror	r27
 800:	f7 95       	ror	r31
 802:	e7 95       	ror	r30
 804:	9f 5f       	subi	r25, 0xFF	; 255
 806:	c1 f7       	brne	.-16     	; 0x7f8 <__mulsf3_pse+0x90>
 808:	fe 2b       	or	r31, r30
 80a:	88 0f       	add	r24, r24
 80c:	91 1d       	adc	r25, r1
 80e:	96 95       	lsr	r25
 810:	87 95       	ror	r24
 812:	97 f9       	bld	r25, 7
 814:	08 95       	ret

00000816 <_exit>:
 816:	f8 94       	cli

00000818 <__stop_program>:
 818:	ff cf       	rjmp	.-2      	; 0x818 <__stop_program>
